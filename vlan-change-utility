#!/usr/bin/env python
from __future__ import print_function, unicode_literals

# Netmiko is the same as ConnectHandler
from netmiko import Netmiko
from getpass import getpass

import socket

print ('VLAN change utility.')

# Determines which device to log into
deviceName = input('\nPlease enter the DNS name of a device to get started e.g core1-sitecode: ')

# Resolves DNS
data = socket.gethostbyname_ex(deviceName)

print ('\nThe DNS and IP Address of this device is: '+repr(data))  

print ('\nLogging in now...')

# SSH Login Details
myDevice = {
    'host': deviceName,
    'username': 'username', #type username here
    'password': 'getpass()',
    'device_type': 'cisco_ios',
}

# Connects to "myDevice"
net_connect = Netmiko(**myDevice)
net_connect.enable()

# Menu defintions 
def ciscoMenu():     
    print ("1. Show VLAN list")
    print ("2. Show interface status")
    print ("3. Modify interface")
    print ("4. Exit")
    
loop=True
while loop:     # While loop which will keep going until loop = False
    ciscoMenu() # Displays menu
    menuChoice = input("Enter your choice [1-4]: ")
    if menuChoice=='1':
        showVlan = net_connect.send_command('\nshow vlan brief')
        print (showVlan)
    elif menuChoice=='2':
        showInt = net_connect.send_command('\nshow int status')
        print (showInt)
    elif menuChoice=='3':
        interface = input ('\nWhat interface would you like to modify e.g Gi0/1: ')
        print ('\nShowing Current Configuration')
        output = net_connect.send_command('show run int '+interface)
        print (output)
        changeDecision = input('\nType "Yes" to change the VLAN or press any key to return: ').upper()
# Starting VLAN configuration
        if changeDecision == 'YES' or changeDecision == 'Y':
            vlanNumber = input ('\nPlease assign VLAN number: ') # User enters VLAN number
            print ('\nAssiging VLAN number...')
            config_commands = [                                  # config_commands list array.
            'Interface '+interface,
            'switchport access vlan '+vlanNumber 
                        ]
            net_connect.send_config_set(config_commands)
            print ('\nVlan Updated...')
            print ('\nShowing Updated Configuration')
            output = net_connect.send_command('show run int '+interface) # Show Updated Config after changes 
            print (output)
            print ('\nWriting Configuration...')
            net_connect.send_command_expect('write mem') # Write Mem
# Ending VLAN configuration
    elif menuChoice=='4':
        print ("\nExiting Program")
        print ('\nThank you for using the VLAN Change Utility, Goodbye!')
        loop=False  # Exit menu to exit application
        net_connect.disconnect()
    else:
        # Any integer inputs other than values 1-4 we print an error message
        print("\nInvalid option. Enter any key to try again..")
